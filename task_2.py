"""
В большой текстовой строке text подсчитать количество встречаемых слов и вернуть 10 самых частых.
Не учитывать знаки препинания и регистр символов.

Слова разделяются пробелами. Такие слова как don t, it s, didn t итд (после того, как убрали знак препинания апостроф)
считать двумя словами. Цифры за слова не считаем.

Отсортируйте по убыванию значения количества повторяющихся слов. Слова выведите в обратном алфавитном порядке.
"""
import itertools
import re

MAX_COUNT = 10
text = """
Регулярное выражение — это строка, задающая шаблон поиска подстрок в тексте. Одному шаблону может соответствовать 
много разных строчек. Термин «Регулярные выражения» является переводом английского словосочетания «Regular expressions».
 Перевод не очень точно отражает смысл, правильнее было бы «шаблонные выражения». Регулярное выражение, 
 или коротко «регулярка», состоит из обычных символов и специальных командных последовательностей. Например, 
 \d задаёт любую цифру, а \d+ — задает любую последовательность из одной или более цифр. Работа с регулярками 
 реализована во всех современных языках программирования. Однако существует несколько «диалектов», поэтому функционал 
 регулярных выражений может различаться от языка к языку. В некоторых языках программирования регулярками пользоваться
  очень удобно (например, в питоне), в некоторых — не слишком (например, в C++).
"""


def count_words(text, max_count):
    dict_words = {}
    words = re.split(r"[' \d\n]", text.lower())
    for word in words:
        word = word.strip(r'["«»()—.,!?;: ]')
        if word == "":
            continue
        elif word in dict_words:
            dict_words[word] += 1
        else:
            dict_words[word] = 1
    dict_words = dict(sorted(dict_words.items()))
    sorted_words = dict(reversed(sorted(dict_words.items(), key=lambda x: x[1])))
    sorted_words_max = dict(itertools.islice(sorted_words.items(), max_count))
    sorted_words_max_list = list(sorted_words_max.items())
    return sorted_words_max_list


print(count_words(text, MAX_COUNT))
